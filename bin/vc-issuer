#!/usr/bin/env python3
#
# The default issuer for the W3C Verifiable Claims test suite.
from argparse import ArgumentParser
import os
import sys

DESCRIPTION = """
Runs the Verifiable Claims issuer, which reads input to digitally sign from
stdin.
"""

DEFAULTS = {
    'unused': 'unused'
}


def _parse_args():
    """Get options from command line and return them."""
    parser = ArgumentParser(description=DESCRIPTION)
    parser.add_argument(
        '-i', '--issuer', action='store', required=True,
        dest='issuer', help='The URL for the issuer.'
        ' [%(default)s]')
    parser.add_argument(
        '-p', '--public-key', action='store', required=True,
        dest='issuer_public_key', help='The public key JSON-LD file.'
        ' [%(default)s]')
    parser.add_argument(
        '-o', '--owner', action='store', required=True,
        dest='owner', help='The key owner URL.'
        ' [%(default)s]')
    parser.add_argument(
        '-r', '--private-key', action='store', required=True,
        dest='issuer_private_key', help='The private key file.'
        ' [%(default)s]')

    return parser.parse_args()


def issue(args):
    """Read stdin and issue credential."""
    pass


if __name__ == '__main__':
    args = _parse_args()

    if not args.issuer_public_key or not os.path.exists(args.issuer_public_key):
        print('Error: You must specify a public key file.', file=sys.stderr)
        sys.exit(1)
    if not args.issuer_private_key or not os.path.exists(args.issuer_private_key):
        print('Error: You must specify a private key file.', file=sys.stderr)
        sys.exit(1)

    issue(args)
